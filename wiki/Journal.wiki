#labels JournalEntry
=*Week4 (10/20 - 10/27)*=

==*Completed:*==

 *   Instead of Google API call to find shortest path, Dijkstra is implemented to find shortest path in the campus.
The path is drawn using Dijkstra's algorithm instead of Google kml. The screen shot is shown below.

http://csc780-go-gator.googlecode.com/svn/img/Dijkstra's.JPG

 *  We can now fetch current Location from WiFi and 3G when GPS is not available. 
 
 *  Fetched GeoPoints for the buildings and paths on the whole campus.

 *  Installed goGator on a device (borrowed from Prof. Puder) and tested the working of navigation.

==*In progress:*==

 *  Rotate map with Magnetometer sensor. This makes it simpler for the user to judge left/right turns. 

 *  Showing popup on the markers which leads to !MapIt button.


------------------------------------------------------------------------
=*Week3 (10/13 - 10/20)*=

==*Completed:*==

 *  Instead of a dot showing current geolocation, the current location of the user is represented by an arrow now. The arrow has the capability of calculating the angle and pointing to any geolocation given as its input. The default geolocation is set to the center of the SFSU Campus. Also, upon rigorous testing we found minor degree of error in the directions for geolocations that are very far apart . The minor error is due to the planar projection of geopoints. Since our scope of App is within the campus it gives considerably well accuracy. There are formulas that exist to get the perfect accuracy but it compromises with performance and so I reduced it to simple formula and higher accuracy.

Screen shots for the above functionality is shown below

http://csc780-go-gator.googlecode.com/svn/img/MapTab.JPG

 *  The user can choose the destination from the list view and Map it. When the !MapIt button is clicked, the path from the current location to the destination is highlighted. The pointer directs the user to the destination through the intermediate geopoints. We tested several cases and verified the obtained directions.
 
Screen shots for directions to Administration Building are shown below

http://csc780-go-gator.googlecode.com/svn/img/MapIt%20-%201.JPG

http://csc780-go-gator.googlecode.com/svn/img/MapIt%20-%202.JPG

http://csc780-go-gator.googlecode.com/svn/img/MapIt%20-%203.JPG


 *  The datastructure to hold manually recorded 'path' & 'building' geopoints of the campus is ready. Also, Dijkstra's Algorithm is implemented to calculate the shortest distance between the geopoints using the newly implemented Data Structure. Overall plan is to shift from Google URI calling to manually calculate the path. Rough testing for this code is done to see it is compiled and working. Will develop unit test case to see the code is working perfectly with set of geopoints and then integrate it in place of google URI Call.

 *  We are using Google code's Issues feature to maintain a log of issues and enhancements. It also lets us set milestones for each functionality. We regularly test each others implementations to maintain good code quality. 

==*In progress:*==

 *  Integration of Dijkstra's algorithm in place of Google's URI calls. 

 *  Developing unit test cases for this functionality and adding more intermediate geopoints.

 *  Rotate map with Magnetometer sensor. This makes it simpler for the user to judge left/right turns.

 *  Initiate Building Navigation functionality. 

 *  Showing popup on the markers which leads to !MapIt button. 




------------------------------------------------------------------------

=*Week2 (10/6 - 10/13)*=

==*Completed:*==

 *  Added markers to map for all the buildings on campus
     Markers are added to the map according to the latitude and longitude points. 

 *  Added View connectors between screen.level2 and screen.level3 
     The item that was clicked on in the list view of screen.level2 is passed as an intent value to the view screen screen.level3. The clicked item is showed in the !MyCampusDetail screen.
 
 *  Added GPS Current location for !MyRide
     The current location can be obtained on the map by providing geo coordinates through DDMS or telnet using google API. 

 *  Added walking distance between 2 geo locations, where first is Current geo location
     The route between any two locations can be obtained by the !MapActivity by setting the destination location through DDMS or telnet.

==*In progress:*==

 *  GPS and Navigation for building coordinates
     Improvement of the route calculation and geo coordinate specification. Creating our own routing table and direction specification instead of using google API.

 *  Refining map overlay for displaying markers corresponding to the list view item. 


------------------------------------------------------------------------

=*Week1 (9/29 - 10/6)*=

==*Completed:*==

 *  Created the home screen and tab bar

 *  Created list views for !MyCampus, !MyCafe, !MyVisit, !MyRide 
 
 *  Displayed Map and Camera on clicking the respective buttons in the tab bar.

 *  Displayed Map when !MapIt button is clicked in the list-item description screen and !MyRide screen

 *  Displayed description in the About us screen

==*In progress:*==

 *  GPS and Navigation

 *  Data population and Icon graphics 

==*References:*==

 *  xmlvm.org/tutorial

 *  developer.android.com

 *  stackoverflow.com

 